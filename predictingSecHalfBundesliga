{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPjSCxHvY+RPhi4a2rEbRKi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"OhECiaz-NNRC","executionInfo":{"status":"ok","timestamp":1737842411007,"user_tz":180,"elapsed":8820,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import statsmodels.formula.api as smf\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","source":["df = pd.read_html(\"https://fbref.com/pt/comps/20/2023-2024/cronograma/2023-2024-Bundesliga-Resultados-e-Calendarios\")[0]\n","pd.set_option(\"display.max_columns\", None)\n","pd.set_option('display.max_rows', 10)\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E-zg3_SINq5s","executionInfo":{"status":"ok","timestamp":1737842416957,"user_tz":180,"elapsed":5952,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"6038fcac-c39e-425c-cf08-6a46dab0de9a"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["      Sem  Dia        Data Horário         Em casa   xG Resultado  xG.1  \\\n","0     1.0  sex  2023-08-18   20:30   Werder Bremen  0.6       0–4   2.8   \n","1     1.0  sáb  2023-08-19   15:30      Leverkusen  1.4       3–2   1.6   \n","2     1.0  sáb  2023-08-19   15:30       Wolfsburg  2.2       2–0   1.2   \n","3     1.0  sáb  2023-08-19   15:30       Stuttgart  3.0       5–0   0.8   \n","4     1.0  sáb  2023-08-19   15:30        Augsburg  2.3       4–4   1.7   \n","..    ...  ...         ...     ...             ...  ...       ...   ...   \n","336  34.0  sáb  2024-05-18   15:30      Hoffenheim  1.8       4–2   1.5   \n","337  34.0  sáb  2024-05-18   15:30       Wolfsburg  0.8       1–3   1.8   \n","338  34.0  sáb  2024-05-18   15:30      Leverkusen  2.4       2–1   1.2   \n","339  34.0  sáb  2024-05-18   15:30      Heidenheim  1.0       4–1   2.3   \n","340  34.0  sáb  2024-05-18   15:30  Eint Frankfurt  2.1       2–2   1.6   \n","\n","         Visitante  Público                    Local              Árbitro  \\\n","0    Bayern Munich   42.100  Wohninvest Weserstadion         Felix Zwayer   \n","1       RB Leipzig   29.464                 BayArena          Felix Brych   \n","2       Heidenheim   22.620         Volkswagen Arena   Florian Badstübner   \n","3           Bochum   53.000                 MHPArena       Daniel Siebert   \n","4         Gladbach   30.660                WWK Arena      Daniel Schlager   \n","..             ...      ...                      ...                  ...   \n","336  Bayern Munich   30.150            PreZero Arena          Marco Fritz   \n","337       Mainz 05   26.627         Volkswagen Arena     Frank Willenborg   \n","338       Augsburg   30.210                 BayArena  Matthias Jöllenbeck   \n","339           Köln   15.000              Voith-Arena          Tobias Welz   \n","340     RB Leipzig   57.500       Deutsche Bank Park         Felix Zwayer   \n","\n","     Relatório da Partida  Notas  \n","0    Relatório da Partida    NaN  \n","1    Relatório da Partida    NaN  \n","2    Relatório da Partida    NaN  \n","3    Relatório da Partida    NaN  \n","4    Relatório da Partida    NaN  \n","..                    ...    ...  \n","336  Relatório da Partida    NaN  \n","337  Relatório da Partida    NaN  \n","338  Relatório da Partida    NaN  \n","339  Relatório da Partida    NaN  \n","340  Relatório da Partida    NaN  \n","\n","[341 rows x 14 columns]\n"]}]},{"cell_type":"code","source":["resultados = df[['Sem', 'Data', 'Em casa', 'Resultado', 'Visitante']]\n","resultados = resultados.dropna(how='all')\n","resultados"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"7UBZqBZpNs6e","executionInfo":{"status":"ok","timestamp":1737842417310,"user_tz":180,"elapsed":361,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"069e2b1a-4b1e-49a0-dbbc-c66750b183f5"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Sem        Data         Em casa Resultado      Visitante\n","0     1.0  2023-08-18   Werder Bremen       0–4  Bayern Munich\n","1     1.0  2023-08-19      Leverkusen       3–2     RB Leipzig\n","2     1.0  2023-08-19       Wolfsburg       2–0     Heidenheim\n","3     1.0  2023-08-19       Stuttgart       5–0         Bochum\n","4     1.0  2023-08-19        Augsburg       4–4       Gladbach\n","..    ...         ...             ...       ...            ...\n","336  34.0  2024-05-18      Hoffenheim       4–2  Bayern Munich\n","337  34.0  2024-05-18       Wolfsburg       1–3       Mainz 05\n","338  34.0  2024-05-18      Leverkusen       2–1       Augsburg\n","339  34.0  2024-05-18      Heidenheim       4–1           Köln\n","340  34.0  2024-05-18  Eint Frankfurt       2–2     RB Leipzig\n","\n","[306 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-af14e5c0-aec1-41f2-b86d-5c003aa2697d\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sem</th>\n","      <th>Data</th>\n","      <th>Em casa</th>\n","      <th>Resultado</th>\n","      <th>Visitante</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>2023-08-18</td>\n","      <td>Werder Bremen</td>\n","      <td>0–4</td>\n","      <td>Bayern Munich</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Leverkusen</td>\n","      <td>3–2</td>\n","      <td>RB Leipzig</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Wolfsburg</td>\n","      <td>2–0</td>\n","      <td>Heidenheim</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Stuttgart</td>\n","      <td>5–0</td>\n","      <td>Bochum</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Augsburg</td>\n","      <td>4–4</td>\n","      <td>Gladbach</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Hoffenheim</td>\n","      <td>4–2</td>\n","      <td>Bayern Munich</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Wolfsburg</td>\n","      <td>1–3</td>\n","      <td>Mainz 05</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Leverkusen</td>\n","      <td>2–1</td>\n","      <td>Augsburg</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Heidenheim</td>\n","      <td>4–1</td>\n","      <td>Köln</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Eint Frankfurt</td>\n","      <td>2–2</td>\n","      <td>RB Leipzig</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>306 rows × 5 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af14e5c0-aec1-41f2-b86d-5c003aa2697d')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-af14e5c0-aec1-41f2-b86d-5c003aa2697d button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af14e5c0-aec1-41f2-b86d-5c003aa2697d');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ae9b51b6-cea5-4690-9d28-5ec3ff4c63f9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae9b51b6-cea5-4690-9d28-5ec3ff4c63f9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ae9b51b6-cea5-4690-9d28-5ec3ff4c63f9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4c4a990c-2e3c-4d2f-97ef-314012ef434f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('resultados')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4c4a990c-2e3c-4d2f-97ef-314012ef434f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('resultados');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"resultados","summary":"{\n  \"name\": \"resultados\",\n  \"rows\": 306,\n  \"fields\": [\n    {\n      \"column\": \"Sem\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.82677840243138,\n        \"min\": 1.0,\n        \"max\": 34.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          16.0,\n          20.0,\n          28.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Data\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"2024-02-11\",\n          \"2023-12-09\",\n          \"2024-05-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Em casa\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Werder Bremen\",\n          \"Leverkusen\",\n          \"Eint Frankfurt\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Resultado\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 36,\n        \"samples\": [\n          \"0\\u20135\",\n          \"3\\u20131\",\n          \"2\\u20135\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Visitante\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Bayern Munich\",\n          \"RB Leipzig\",\n          \"Darmstadt 98\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["placar = resultados.loc[:,\"Resultado\"].str.split(\"–\", n = 1, expand = True)\n","print(placar)\n","resultados.loc[:,\"CasaResul\"] = placar.loc[:,0]\n","resultados.loc[:,\"VisiResul\"] = placar.loc[:,1]\n","resultados = resultados.drop(columns=[\"Resultado\"])\n","resultados"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":667},"id":"X-6DcXCUNwDB","executionInfo":{"status":"ok","timestamp":1737842417311,"user_tz":180,"elapsed":19,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"fdd40df3-5d93-407e-a71c-0e876db117f5"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["     0  1\n","0    0  4\n","1    3  2\n","2    2  0\n","3    5  0\n","4    4  4\n","..  .. ..\n","336  4  2\n","337  1  3\n","338  2  1\n","339  4  1\n","340  2  2\n","\n","[306 rows x 2 columns]\n"]},{"output_type":"execute_result","data":{"text/plain":["      Sem        Data         Em casa      Visitante CasaResul VisiResul\n","0     1.0  2023-08-18   Werder Bremen  Bayern Munich         0         4\n","1     1.0  2023-08-19      Leverkusen     RB Leipzig         3         2\n","2     1.0  2023-08-19       Wolfsburg     Heidenheim         2         0\n","3     1.0  2023-08-19       Stuttgart         Bochum         5         0\n","4     1.0  2023-08-19        Augsburg       Gladbach         4         4\n","..    ...         ...             ...            ...       ...       ...\n","336  34.0  2024-05-18      Hoffenheim  Bayern Munich         4         2\n","337  34.0  2024-05-18       Wolfsburg       Mainz 05         1         3\n","338  34.0  2024-05-18      Leverkusen       Augsburg         2         1\n","339  34.0  2024-05-18      Heidenheim           Köln         4         1\n","340  34.0  2024-05-18  Eint Frankfurt     RB Leipzig         2         2\n","\n","[306 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-bfd17bb1-2564-413d-ba9e-981b99c3cc16\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sem</th>\n","      <th>Data</th>\n","      <th>Em casa</th>\n","      <th>Visitante</th>\n","      <th>CasaResul</th>\n","      <th>VisiResul</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>2023-08-18</td>\n","      <td>Werder Bremen</td>\n","      <td>Bayern Munich</td>\n","      <td>0</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Leverkusen</td>\n","      <td>RB Leipzig</td>\n","      <td>3</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Wolfsburg</td>\n","      <td>Heidenheim</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Stuttgart</td>\n","      <td>Bochum</td>\n","      <td>5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Augsburg</td>\n","      <td>Gladbach</td>\n","      <td>4</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Hoffenheim</td>\n","      <td>Bayern Munich</td>\n","      <td>4</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Wolfsburg</td>\n","      <td>Mainz 05</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Leverkusen</td>\n","      <td>Augsburg</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Heidenheim</td>\n","      <td>Köln</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Eint Frankfurt</td>\n","      <td>RB Leipzig</td>\n","      <td>2</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>306 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bfd17bb1-2564-413d-ba9e-981b99c3cc16')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bfd17bb1-2564-413d-ba9e-981b99c3cc16 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bfd17bb1-2564-413d-ba9e-981b99c3cc16');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a3d871e6-d09d-48e4-8a65-b0adf1b22f16\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3d871e6-d09d-48e4-8a65-b0adf1b22f16')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a3d871e6-d09d-48e4-8a65-b0adf1b22f16 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d70a49e4-9b43-4c51-8131-a914fe657bda\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('resultados')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d70a49e4-9b43-4c51-8131-a914fe657bda button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('resultados');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"resultados","summary":"{\n  \"name\": \"resultados\",\n  \"rows\": 306,\n  \"fields\": [\n    {\n      \"column\": \"Sem\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.82677840243138,\n        \"min\": 1.0,\n        \"max\": 34.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          16.0,\n          20.0,\n          28.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Data\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"2024-02-11\",\n          \"2023-12-09\",\n          \"2024-05-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Em casa\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Werder Bremen\",\n          \"Leverkusen\",\n          \"Eint Frankfurt\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Visitante\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Bayern Munich\",\n          \"RB Leipzig\",\n          \"Darmstadt 98\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CasaResul\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"8\",\n          \"3\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VisiResul\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"4\",\n          \"2\",\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["resultados[\"Vencedor\"] = np.where(resultados[\"CasaResul\"] > resultados[\"VisiResul\"], \"C\",\n","                                  np.where(resultados[\"CasaResul\"] < resultados[\"VisiResul\"], \"V\", \"E\"))\n","resultados"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"_RB-bCbcNzfM","executionInfo":{"status":"ok","timestamp":1737842417311,"user_tz":180,"elapsed":18,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"38169a6a-2527-4e97-c82f-540e91d5fb75"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Sem        Data         Em casa      Visitante CasaResul VisiResul  \\\n","0     1.0  2023-08-18   Werder Bremen  Bayern Munich         0         4   \n","1     1.0  2023-08-19      Leverkusen     RB Leipzig         3         2   \n","2     1.0  2023-08-19       Wolfsburg     Heidenheim         2         0   \n","3     1.0  2023-08-19       Stuttgart         Bochum         5         0   \n","4     1.0  2023-08-19        Augsburg       Gladbach         4         4   \n","..    ...         ...             ...            ...       ...       ...   \n","336  34.0  2024-05-18      Hoffenheim  Bayern Munich         4         2   \n","337  34.0  2024-05-18       Wolfsburg       Mainz 05         1         3   \n","338  34.0  2024-05-18      Leverkusen       Augsburg         2         1   \n","339  34.0  2024-05-18      Heidenheim           Köln         4         1   \n","340  34.0  2024-05-18  Eint Frankfurt     RB Leipzig         2         2   \n","\n","    Vencedor  \n","0          V  \n","1          C  \n","2          C  \n","3          C  \n","4          E  \n","..       ...  \n","336        C  \n","337        V  \n","338        C  \n","339        C  \n","340        E  \n","\n","[306 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-8b93e820-237c-4eee-80af-fa20373e8064\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sem</th>\n","      <th>Data</th>\n","      <th>Em casa</th>\n","      <th>Visitante</th>\n","      <th>CasaResul</th>\n","      <th>VisiResul</th>\n","      <th>Vencedor</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.0</td>\n","      <td>2023-08-18</td>\n","      <td>Werder Bremen</td>\n","      <td>Bayern Munich</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>V</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Leverkusen</td>\n","      <td>RB Leipzig</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Wolfsburg</td>\n","      <td>Heidenheim</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Stuttgart</td>\n","      <td>Bochum</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.0</td>\n","      <td>2023-08-19</td>\n","      <td>Augsburg</td>\n","      <td>Gladbach</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>E</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>336</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Hoffenheim</td>\n","      <td>Bayern Munich</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>337</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Wolfsburg</td>\n","      <td>Mainz 05</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>V</td>\n","    </tr>\n","    <tr>\n","      <th>338</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Leverkusen</td>\n","      <td>Augsburg</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>339</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Heidenheim</td>\n","      <td>Köln</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>340</th>\n","      <td>34.0</td>\n","      <td>2024-05-18</td>\n","      <td>Eint Frankfurt</td>\n","      <td>RB Leipzig</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>E</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>306 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b93e820-237c-4eee-80af-fa20373e8064')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8b93e820-237c-4eee-80af-fa20373e8064 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8b93e820-237c-4eee-80af-fa20373e8064');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-04bec81d-22f2-4727-a8aa-c7c7456b32fc\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04bec81d-22f2-4727-a8aa-c7c7456b32fc')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-04bec81d-22f2-4727-a8aa-c7c7456b32fc button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_94ecdec8-4d0f-41fc-bd44-93fab1e44f41\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('resultados')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_94ecdec8-4d0f-41fc-bd44-93fab1e44f41 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('resultados');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"resultados","summary":"{\n  \"name\": \"resultados\",\n  \"rows\": 306,\n  \"fields\": [\n    {\n      \"column\": \"Sem\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.82677840243138,\n        \"min\": 1.0,\n        \"max\": 34.0,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          16.0,\n          20.0,\n          28.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Data\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 99,\n        \"samples\": [\n          \"2024-02-11\",\n          \"2023-12-09\",\n          \"2024-05-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Em casa\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Werder Bremen\",\n          \"Leverkusen\",\n          \"Eint Frankfurt\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Visitante\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 18,\n        \"samples\": [\n          \"Bayern Munich\",\n          \"RB Leipzig\",\n          \"Darmstadt 98\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CasaResul\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"8\",\n          \"3\",\n          \"1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VisiResul\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"4\",\n          \"2\",\n          \"5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Vencedor\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"V\",\n          \"C\",\n          \"E\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#verificando rodada atrasada\n","resultados[resultados.loc[:,\"Sem\"] == 15]\n","resultados.dtypes\n","print(resultados['CasaResul'].value_counts())\n","#transformar casa resul e visi resul em numeros\n","resultados['CasaResul'] = resultados['CasaResul'].astype(int)\n","resultados['VisiResul'] = resultados['VisiResul'].astype(int)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uD9SDB4qN0_2","executionInfo":{"status":"ok","timestamp":1737842417552,"user_tz":180,"elapsed":258,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"39837aa0-c346-46bf-9610-7a2f0186c131"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["CasaResul\n","1    90\n","2    76\n","0    55\n","3    51\n","4    21\n","5     9\n","8     2\n","7     1\n","6     1\n","Name: count, dtype: int64\n"]}]},{"cell_type":"code","source":["resultados['VCasaValor'] = np.where(resultados['Vencedor']=='C',1,np.where(resultados['Vencedor']=='E',0.5,0))\n","resultados['VVisValor'] = np.where(resultados['Vencedor']=='V',1,np.where(resultados['Vencedor']=='E',0.5,0))\n","resultados['count'] = 1"],"metadata":{"id":"P9VkZXlvN2mv","executionInfo":{"status":"ok","timestamp":1737842417552,"user_tz":180,"elapsed":10,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["primeiro = resultados[resultados.loc[:, \"Sem\"] < 20]\n","segundo = resultados[resultados.loc[:, \"Sem\"] > 19]\n","print(primeiro.shape)\n","print(segundo.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U25igxIjN4Dz","executionInfo":{"status":"ok","timestamp":1737842417552,"user_tz":180,"elapsed":10,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"e58996ea-7ddc-4744-d400-e3c0bb2adefa"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["(171, 10)\n","(135, 10)\n"]}]},{"cell_type":"code","source":["PrimeiroTurnoC = primeiro.groupby(['Em casa'])[['count', 'VCasaValor','CasaResul','VisiResul']].sum().reset_index()\n","PrimeiroTurnoC = PrimeiroTurnoC.rename(columns={'Em casa':'time', 'CasaResul': 'GolsCasaC', 'VisiResul': 'GolsVisiC'})\n","PrimeiroTurnoV = primeiro.groupby(['Visitante'])[['count', 'VVisValor','CasaResul','VisiResul']].sum().reset_index()\n","PrimeiroTurnoV = PrimeiroTurnoV.rename(columns={'Visitante':'time', 'CasaResul': 'GolsCasaV', 'VisiResul': 'GolsVisiV'})"],"metadata":{"id":"82Uzww1uN6Gc","executionInfo":{"status":"ok","timestamp":1737842417552,"user_tz":180,"elapsed":5,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["SegundoTurnoC = segundo.groupby(['Em casa'])[['count', 'VCasaValor','CasaResul','VisiResul']].sum().reset_index()\n","SegundoTurnoC = SegundoTurnoC.rename(columns={'Em casa':'time', 'CasaResul': 'GolsCasaC', 'VisiResul': 'GolsVisiC'})\n","SegundoTurnoV = segundo.groupby(['Visitante'])[['count', 'VVisValor','CasaResul','VisiResul']].sum().reset_index()\n","SegundoTurnoV = SegundoTurnoV.rename(columns={'Visitante':'time', 'CasaResul': 'GolsCasaV', 'VisiResul': 'GolsVisiV'})"],"metadata":{"id":"YohrK4atN7kW","executionInfo":{"status":"ok","timestamp":1737842417555,"user_tz":180,"elapsed":7,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["PrimeiroTurno = pd.merge(PrimeiroTurnoC, PrimeiroTurnoV, on=['time'])\n","SegundoTurno = pd.merge(SegundoTurnoC, SegundoTurnoV, on=['time'])"],"metadata":{"id":"ph6Faop5N812","executionInfo":{"status":"ok","timestamp":1737842417555,"user_tz":180,"elapsed":6,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["PrimeiroTurno['W'] = PrimeiroTurno['VCasaValor']+PrimeiroTurno['VVisValor'] #win value\n","PrimeiroTurno['G'] = PrimeiroTurno['count_x'] + PrimeiroTurno['count_y']  #games\n","PrimeiroTurno['GF'] = PrimeiroTurno['GolsCasaC']+PrimeiroTurno['GolsVisiV'] #goals for\n","PrimeiroTurno['GA'] = PrimeiroTurno['GolsVisiC']+PrimeiroTurno['GolsCasaV'] #goals against\n","\n","SegundoTurno['W'] = SegundoTurno['VCasaValor']+SegundoTurno['VVisValor'] #win value\n","SegundoTurno['G'] = SegundoTurno['count_x'] + SegundoTurno['count_y']  #games\n","SegundoTurno['GF'] = SegundoTurno['GolsCasaC']+SegundoTurno['GolsVisiV'] #goals for\n","SegundoTurno['GA'] = SegundoTurno['GolsVisiC']+SegundoTurno['GolsCasaV'] #goals against"],"metadata":{"id":"yNL52klfN9KO","executionInfo":{"status":"ok","timestamp":1737842417820,"user_tz":180,"elapsed":271,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["PrimeiroTurno['wpc'] = PrimeiroTurno['W']/PrimeiroTurno['G'] #win percentage\n","PrimeiroTurno['pyth'] = PrimeiroTurno['GF']**2/(PrimeiroTurno['GF']**2 + PrimeiroTurno['GA']**2)\n","\n","SegundoTurno['wpc'] = SegundoTurno['W']/SegundoTurno['G'] #win percentage\n","SegundoTurno['pyth'] = SegundoTurno['GF']**2/(SegundoTurno['GF']**2 + SegundoTurno['GA']**2)"],"metadata":{"id":"x7udVn9AN-tK","executionInfo":{"status":"ok","timestamp":1737842417820,"user_tz":180,"elapsed":5,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["sns.regplot(x=\"pyth\", y = \"wpc\", data = PrimeiroTurno,ci=None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"T40swRYmOALJ","executionInfo":{"status":"ok","timestamp":1737842418653,"user_tz":180,"elapsed":837,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"0d794cac-8e7f-4217-d94f-24a690d10a89"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='pyth', ylabel='wpc'>"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.regplot(x=\"pyth\", y = \"wpc\", data = SegundoTurno,ci=None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"9u8m_drpOBhn","executionInfo":{"status":"ok","timestamp":1737842418653,"user_tz":180,"elapsed":6,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"f8b6e6e8-7226-4e01-8323-133a46bd873b"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='pyth', ylabel='wpc'>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["Bra = pd.merge(PrimeiroTurno, SegundoTurno, on=['time'])\n","Bra"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":530},"id":"fzoKOvOAOCyr","executionInfo":{"status":"ok","timestamp":1737842419166,"user_tz":180,"elapsed":517,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"4744d019-dab0-4b5c-b601-57be6c5c93c6"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             time  count_x_x  VCasaValor_x  GolsCasaC_x  GolsVisiC_x  \\\n","0        Augsburg         10           5.0           18           18   \n","1   Bayern Munich         10           8.5           34            6   \n","2          Bochum          9           5.5           14           10   \n","3    Darmstadt 98         10           2.5           12           21   \n","4        Dortmund         10           7.0           19           15   \n","..            ...        ...           ...          ...          ...   \n","13     RB Leipzig         10           7.0           26           10   \n","14      Stuttgart         10           8.5           31            9   \n","15   Union Berlin          9           4.5           11           14   \n","16  Werder Bremen         10           6.0           18           15   \n","17      Wolfsburg          9           5.0           13           10   \n","\n","    count_y_x  VVisValor_x  GolsCasaV_x  GolsVisiV_x   W_x  G_x  GF_x  GA_x  \\\n","0           9          3.0           18           10   8.0   19    28    36   \n","1           9          7.5           12           22  16.0   19    56    18   \n","2          10          2.5           27            7   8.0   19    21    37   \n","3           9          2.0           26           10   4.5   19    22    47   \n","4           9          6.0           11           21  13.0   19    40    26   \n","..        ...          ...          ...          ...   ...  ...   ...   ...   \n","13          9          4.5           16           16  11.5   19    42    26   \n","14          9          4.0           16           12  12.5   19    43    25   \n","15         10          2.0           19            8   6.5   19    19    33   \n","16          9          2.5           17           10   8.5   19    28    32   \n","17         10          3.0           20           10   8.0   19    23    30   \n","\n","       wpc_x    pyth_x  count_x_y  VCasaValor_y  GolsCasaC_y  GolsVisiC_y  \\\n","0   0.421053  0.376923          7           4.0            8            8   \n","1   0.842105  0.906358          7           6.0           19            6   \n","2   0.421053  0.243646          8           3.5           12           19   \n","3   0.236842  0.179725          7           0.0            3           23   \n","4   0.684211  0.702988          7           4.5           18            7   \n","..       ...       ...        ...           ...          ...          ...   \n","13  0.605263  0.722951          7           6.0           14            2   \n","14  0.657895  0.747373          7           6.0           19            6   \n","15  0.342105  0.248966          8           3.5           11           16   \n","16  0.447368  0.433628          7           3.0           11           11   \n","17  0.421053  0.370189          8           3.0           12           15   \n","\n","    count_y_y  VVisValor_y  GolsCasaV_y  GolsVisiV_y   W_y  G_y  GF_y  GA_y  \\\n","0           8          2.5           16           14   6.5   15    22    24   \n","1           8          2.5           21           19   8.5   15    38    27   \n","2           7          1.5           18            9   5.0   15    21    37   \n","3           8          2.5           16            5   2.5   15     8    39   \n","4           8          5.0           10           10   9.5   15    28    17   \n","..        ...          ...          ...          ...   ...  ...   ...   ...   \n","13          8          5.5           11           21  11.5   15    35    13   \n","14          8          6.5            8           16  12.5   15    35    14   \n","15          7          2.0            9            3   5.5   15    14    25   \n","16          8          4.0           11            9   7.0   15    20    22   \n","17          7          2.5           11            6   5.5   15    18    26   \n","\n","       wpc_y    pyth_y  \n","0   0.433333  0.456604  \n","1   0.566667  0.664519  \n","2   0.333333  0.243646  \n","3   0.166667  0.040379  \n","4   0.633333  0.730662  \n","..       ...       ...  \n","13  0.766667  0.878766  \n","14  0.833333  0.862069  \n","15  0.366667  0.238733  \n","16  0.466667  0.452489  \n","17  0.366667  0.324000  \n","\n","[18 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-9a62082b-a107-4b86-b629-28c5547719af\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>time</th>\n","      <th>count_x_x</th>\n","      <th>VCasaValor_x</th>\n","      <th>GolsCasaC_x</th>\n","      <th>GolsVisiC_x</th>\n","      <th>count_y_x</th>\n","      <th>VVisValor_x</th>\n","      <th>GolsCasaV_x</th>\n","      <th>GolsVisiV_x</th>\n","      <th>W_x</th>\n","      <th>G_x</th>\n","      <th>GF_x</th>\n","      <th>GA_x</th>\n","      <th>wpc_x</th>\n","      <th>pyth_x</th>\n","      <th>count_x_y</th>\n","      <th>VCasaValor_y</th>\n","      <th>GolsCasaC_y</th>\n","      <th>GolsVisiC_y</th>\n","      <th>count_y_y</th>\n","      <th>VVisValor_y</th>\n","      <th>GolsCasaV_y</th>\n","      <th>GolsVisiV_y</th>\n","      <th>W_y</th>\n","      <th>G_y</th>\n","      <th>GF_y</th>\n","      <th>GA_y</th>\n","      <th>wpc_y</th>\n","      <th>pyth_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Augsburg</td>\n","      <td>10</td>\n","      <td>5.0</td>\n","      <td>18</td>\n","      <td>18</td>\n","      <td>9</td>\n","      <td>3.0</td>\n","      <td>18</td>\n","      <td>10</td>\n","      <td>8.0</td>\n","      <td>19</td>\n","      <td>28</td>\n","      <td>36</td>\n","      <td>0.421053</td>\n","      <td>0.376923</td>\n","      <td>7</td>\n","      <td>4.0</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>2.5</td>\n","      <td>16</td>\n","      <td>14</td>\n","      <td>6.5</td>\n","      <td>15</td>\n","      <td>22</td>\n","      <td>24</td>\n","      <td>0.433333</td>\n","      <td>0.456604</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Bayern Munich</td>\n","      <td>10</td>\n","      <td>8.5</td>\n","      <td>34</td>\n","      <td>6</td>\n","      <td>9</td>\n","      <td>7.5</td>\n","      <td>12</td>\n","      <td>22</td>\n","      <td>16.0</td>\n","      <td>19</td>\n","      <td>56</td>\n","      <td>18</td>\n","      <td>0.842105</td>\n","      <td>0.906358</td>\n","      <td>7</td>\n","      <td>6.0</td>\n","      <td>19</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>2.5</td>\n","      <td>21</td>\n","      <td>19</td>\n","      <td>8.5</td>\n","      <td>15</td>\n","      <td>38</td>\n","      <td>27</td>\n","      <td>0.566667</td>\n","      <td>0.664519</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Bochum</td>\n","      <td>9</td>\n","      <td>5.5</td>\n","      <td>14</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>2.5</td>\n","      <td>27</td>\n","      <td>7</td>\n","      <td>8.0</td>\n","      <td>19</td>\n","      <td>21</td>\n","      <td>37</td>\n","      <td>0.421053</td>\n","      <td>0.243646</td>\n","      <td>8</td>\n","      <td>3.5</td>\n","      <td>12</td>\n","      <td>19</td>\n","      <td>7</td>\n","      <td>1.5</td>\n","      <td>18</td>\n","      <td>9</td>\n","      <td>5.0</td>\n","      <td>15</td>\n","      <td>21</td>\n","      <td>37</td>\n","      <td>0.333333</td>\n","      <td>0.243646</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Darmstadt 98</td>\n","      <td>10</td>\n","      <td>2.5</td>\n","      <td>12</td>\n","      <td>21</td>\n","      <td>9</td>\n","      <td>2.0</td>\n","      <td>26</td>\n","      <td>10</td>\n","      <td>4.5</td>\n","      <td>19</td>\n","      <td>22</td>\n","      <td>47</td>\n","      <td>0.236842</td>\n","      <td>0.179725</td>\n","      <td>7</td>\n","      <td>0.0</td>\n","      <td>3</td>\n","      <td>23</td>\n","      <td>8</td>\n","      <td>2.5</td>\n","      <td>16</td>\n","      <td>5</td>\n","      <td>2.5</td>\n","      <td>15</td>\n","      <td>8</td>\n","      <td>39</td>\n","      <td>0.166667</td>\n","      <td>0.040379</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Dortmund</td>\n","      <td>10</td>\n","      <td>7.0</td>\n","      <td>19</td>\n","      <td>15</td>\n","      <td>9</td>\n","      <td>6.0</td>\n","      <td>11</td>\n","      <td>21</td>\n","      <td>13.0</td>\n","      <td>19</td>\n","      <td>40</td>\n","      <td>26</td>\n","      <td>0.684211</td>\n","      <td>0.702988</td>\n","      <td>7</td>\n","      <td>4.5</td>\n","      <td>18</td>\n","      <td>7</td>\n","      <td>8</td>\n","      <td>5.0</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>9.5</td>\n","      <td>15</td>\n","      <td>28</td>\n","      <td>17</td>\n","      <td>0.633333</td>\n","      <td>0.730662</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>RB Leipzig</td>\n","      <td>10</td>\n","      <td>7.0</td>\n","      <td>26</td>\n","      <td>10</td>\n","      <td>9</td>\n","      <td>4.5</td>\n","      <td>16</td>\n","      <td>16</td>\n","      <td>11.5</td>\n","      <td>19</td>\n","      <td>42</td>\n","      <td>26</td>\n","      <td>0.605263</td>\n","      <td>0.722951</td>\n","      <td>7</td>\n","      <td>6.0</td>\n","      <td>14</td>\n","      <td>2</td>\n","      <td>8</td>\n","      <td>5.5</td>\n","      <td>11</td>\n","      <td>21</td>\n","      <td>11.5</td>\n","      <td>15</td>\n","      <td>35</td>\n","      <td>13</td>\n","      <td>0.766667</td>\n","      <td>0.878766</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>Stuttgart</td>\n","      <td>10</td>\n","      <td>8.5</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>9</td>\n","      <td>4.0</td>\n","      <td>16</td>\n","      <td>12</td>\n","      <td>12.5</td>\n","      <td>19</td>\n","      <td>43</td>\n","      <td>25</td>\n","      <td>0.657895</td>\n","      <td>0.747373</td>\n","      <td>7</td>\n","      <td>6.0</td>\n","      <td>19</td>\n","      <td>6</td>\n","      <td>8</td>\n","      <td>6.5</td>\n","      <td>8</td>\n","      <td>16</td>\n","      <td>12.5</td>\n","      <td>15</td>\n","      <td>35</td>\n","      <td>14</td>\n","      <td>0.833333</td>\n","      <td>0.862069</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>Union Berlin</td>\n","      <td>9</td>\n","      <td>4.5</td>\n","      <td>11</td>\n","      <td>14</td>\n","      <td>10</td>\n","      <td>2.0</td>\n","      <td>19</td>\n","      <td>8</td>\n","      <td>6.5</td>\n","      <td>19</td>\n","      <td>19</td>\n","      <td>33</td>\n","      <td>0.342105</td>\n","      <td>0.248966</td>\n","      <td>8</td>\n","      <td>3.5</td>\n","      <td>11</td>\n","      <td>16</td>\n","      <td>7</td>\n","      <td>2.0</td>\n","      <td>9</td>\n","      <td>3</td>\n","      <td>5.5</td>\n","      <td>15</td>\n","      <td>14</td>\n","      <td>25</td>\n","      <td>0.366667</td>\n","      <td>0.238733</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>Werder Bremen</td>\n","      <td>10</td>\n","      <td>6.0</td>\n","      <td>18</td>\n","      <td>15</td>\n","      <td>9</td>\n","      <td>2.5</td>\n","      <td>17</td>\n","      <td>10</td>\n","      <td>8.5</td>\n","      <td>19</td>\n","      <td>28</td>\n","      <td>32</td>\n","      <td>0.447368</td>\n","      <td>0.433628</td>\n","      <td>7</td>\n","      <td>3.0</td>\n","      <td>11</td>\n","      <td>11</td>\n","      <td>8</td>\n","      <td>4.0</td>\n","      <td>11</td>\n","      <td>9</td>\n","      <td>7.0</td>\n","      <td>15</td>\n","      <td>20</td>\n","      <td>22</td>\n","      <td>0.466667</td>\n","      <td>0.452489</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Wolfsburg</td>\n","      <td>9</td>\n","      <td>5.0</td>\n","      <td>13</td>\n","      <td>10</td>\n","      <td>10</td>\n","      <td>3.0</td>\n","      <td>20</td>\n","      <td>10</td>\n","      <td>8.0</td>\n","      <td>19</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>0.421053</td>\n","      <td>0.370189</td>\n","      <td>8</td>\n","      <td>3.0</td>\n","      <td>12</td>\n","      <td>15</td>\n","      <td>7</td>\n","      <td>2.5</td>\n","      <td>11</td>\n","      <td>6</td>\n","      <td>5.5</td>\n","      <td>15</td>\n","      <td>18</td>\n","      <td>26</td>\n","      <td>0.366667</td>\n","      <td>0.324000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>18 rows × 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a62082b-a107-4b86-b629-28c5547719af')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9a62082b-a107-4b86-b629-28c5547719af button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9a62082b-a107-4b86-b629-28c5547719af');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ae028b20-f5f8-47d5-b774-4af86dd4df89\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae028b20-f5f8-47d5-b774-4af86dd4df89')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ae028b20-f5f8-47d5-b774-4af86dd4df89 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_fe297cf6-319d-4d0b-97b9-db385162f71d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('Bra')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_fe297cf6-319d-4d0b-97b9-db385162f71d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('Bra');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"Bra"}},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["sns.regplot(x=\"wpc_x\", y = \"wpc_y\", data = Bra,ci=None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"rYLpz-NlOEUX","executionInfo":{"status":"ok","timestamp":1737842419167,"user_tz":180,"elapsed":16,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"2d5f818a-b02d-43f1-e770-14352681dc85"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='wpc_x', ylabel='wpc_y'>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sns.regplot(x=\"pyth_x\", y = \"wpc_y\", data = Bra, ci=None)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":467},"id":"6jw0SswjOF0n","executionInfo":{"status":"ok","timestamp":1737842419565,"user_tz":180,"elapsed":412,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"ecbe0c66-0fa5-4f65-a868-2eed565457e2"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='pyth_x', ylabel='wpc_y'>"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["dd = Bra.loc[:,['pyth_x', 'wpc_x', 'pyth_y', 'wpc_y']]\n","dd"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"nX4YLFsOOHUI","executionInfo":{"status":"ok","timestamp":1737842419565,"user_tz":180,"elapsed":20,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"518c1c45-d261-40e8-9672-b1047addceeb"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      pyth_x     wpc_x    pyth_y     wpc_y\n","0   0.376923  0.421053  0.456604  0.433333\n","1   0.906358  0.842105  0.664519  0.566667\n","2   0.243646  0.421053  0.243646  0.333333\n","3   0.179725  0.236842  0.040379  0.166667\n","4   0.702988  0.684211  0.730662  0.633333\n","..       ...       ...       ...       ...\n","13  0.722951  0.605263  0.878766  0.766667\n","14  0.747373  0.657895  0.862069  0.833333\n","15  0.248966  0.342105  0.238733  0.366667\n","16  0.433628  0.447368  0.452489  0.466667\n","17  0.370189  0.421053  0.324000  0.366667\n","\n","[18 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-2d8d6442-f6b2-418a-a679-b843355d8d92\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pyth_x</th>\n","      <th>wpc_x</th>\n","      <th>pyth_y</th>\n","      <th>wpc_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.376923</td>\n","      <td>0.421053</td>\n","      <td>0.456604</td>\n","      <td>0.433333</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.906358</td>\n","      <td>0.842105</td>\n","      <td>0.664519</td>\n","      <td>0.566667</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.243646</td>\n","      <td>0.421053</td>\n","      <td>0.243646</td>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.179725</td>\n","      <td>0.236842</td>\n","      <td>0.040379</td>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.702988</td>\n","      <td>0.684211</td>\n","      <td>0.730662</td>\n","      <td>0.633333</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>0.722951</td>\n","      <td>0.605263</td>\n","      <td>0.878766</td>\n","      <td>0.766667</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>0.747373</td>\n","      <td>0.657895</td>\n","      <td>0.862069</td>\n","      <td>0.833333</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0.248966</td>\n","      <td>0.342105</td>\n","      <td>0.238733</td>\n","      <td>0.366667</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>0.433628</td>\n","      <td>0.447368</td>\n","      <td>0.452489</td>\n","      <td>0.466667</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.370189</td>\n","      <td>0.421053</td>\n","      <td>0.324000</td>\n","      <td>0.366667</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>18 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d8d6442-f6b2-418a-a679-b843355d8d92')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2d8d6442-f6b2-418a-a679-b843355d8d92 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2d8d6442-f6b2-418a-a679-b843355d8d92');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fc21e01e-b26f-4458-b191-aa7114475963\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc21e01e-b26f-4458-b191-aa7114475963')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fc21e01e-b26f-4458-b191-aa7114475963 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1be1e86b-e789-4350-b08f-d75798707ddc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('dd')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1be1e86b-e789-4350-b08f-d75798707ddc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('dd');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dd","summary":"{\n  \"name\": \"dd\",\n  \"rows\": 18,\n  \"fields\": [\n    {\n      \"column\": \"pyth_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2486616166080983,\n        \"min\": 0.11076923076923077,\n        \"max\": 0.9272997032640949,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.3769230769230769,\n          0.9063583815028902,\n          0.3902439024390244\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wpc_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1847625519054276,\n        \"min\": 0.23684210526315788,\n        \"max\": 0.8947368421052632,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.6578947368421053,\n          0.8947368421052632,\n          0.42105263157894735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pyth_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2489028538259724,\n        \"min\": 0.04037854889589906,\n        \"max\": 0.9383096853793954,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.45660377358490567,\n          0.6645190980211689,\n          0.5475113122171946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wpc_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1919967319983317,\n        \"min\": 0.16666666666666666,\n        \"max\": 0.9333333333333333,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.8333333333333334,\n          0.7666666666666667,\n          0.43333333333333335\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["rename_dict = {\n","    'pyth_x': 'pythagorean_x',\n","    'wpc_x': 'win_percentage_x',\n","    'pyth_y': 'pythagorean_y',\n","    'wpc_y': 'win_percentage_y'\n","}\n","\n","# Aplicando a renomeação\n","dd.rename(columns=rename_dict, inplace=True)"],"metadata":{"id":"aHtJ14WyecxS","executionInfo":{"status":"ok","timestamp":1737842436054,"user_tz":180,"elapsed":2,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["cor_matrix = dd.corr()\n","\n","# View the correlation matrix\n","cor_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"dBbarJ-gOJYE","executionInfo":{"status":"ok","timestamp":1737842430222,"user_tz":180,"elapsed":254,"user":{"displayName":"Lucas Calmon","userId":"09752934338034803828"}},"outputId":"31a7860b-aebd-4f9e-fa30-50b5021bb3f1"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          pyth_x     wpc_x    pyth_y     wpc_y\n","pyth_x  1.000000  0.967320  0.793446  0.763565\n","wpc_x   0.967320  1.000000  0.762152  0.743292\n","pyth_y  0.793446  0.762152  1.000000  0.972627\n","wpc_y   0.763565  0.743292  0.972627  1.000000"],"text/html":["\n","  <div id=\"df-9863385d-670c-4792-8ea6-fa9f90dbc7f9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>pyth_x</th>\n","      <th>wpc_x</th>\n","      <th>pyth_y</th>\n","      <th>wpc_y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>pyth_x</th>\n","      <td>1.000000</td>\n","      <td>0.967320</td>\n","      <td>0.793446</td>\n","      <td>0.763565</td>\n","    </tr>\n","    <tr>\n","      <th>wpc_x</th>\n","      <td>0.967320</td>\n","      <td>1.000000</td>\n","      <td>0.762152</td>\n","      <td>0.743292</td>\n","    </tr>\n","    <tr>\n","      <th>pyth_y</th>\n","      <td>0.793446</td>\n","      <td>0.762152</td>\n","      <td>1.000000</td>\n","      <td>0.972627</td>\n","    </tr>\n","    <tr>\n","      <th>wpc_y</th>\n","      <td>0.763565</td>\n","      <td>0.743292</td>\n","      <td>0.972627</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9863385d-670c-4792-8ea6-fa9f90dbc7f9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9863385d-670c-4792-8ea6-fa9f90dbc7f9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9863385d-670c-4792-8ea6-fa9f90dbc7f9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-358770fa-f5cc-4818-aca8-06b5399ef0ad\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-358770fa-f5cc-4818-aca8-06b5399ef0ad')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-358770fa-f5cc-4818-aca8-06b5399ef0ad button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_8cf0c28d-ead0-4d68-bbf2-2fa338a3f1be\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cor_matrix')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8cf0c28d-ead0-4d68-bbf2-2fa338a3f1be button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('cor_matrix');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cor_matrix","summary":"{\n  \"name\": \"cor_matrix\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"pyth_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11981776444931665,\n        \"min\": 0.7635645549743282,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9673198072092184,\n          0.7635645549743282,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wpc_x\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13421892545188469,\n        \"min\": 0.7432917951018648,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          0.7432917951018648,\n          0.9673198072092184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pyth_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12157657083893351,\n        \"min\": 0.7621522544186224,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7621522544186224,\n          0.9726271792732932,\n          0.7934458771251643\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"wpc_y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13517364682317592,\n        \"min\": 0.7432917951018648,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.7432917951018648,\n          1.0,\n          0.7635645549743282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":23}]}]}